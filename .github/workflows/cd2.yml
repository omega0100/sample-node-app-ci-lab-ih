name: CI/CD Pipeline with SonarQube, Docker, and Azure Container Apps

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build-test-scan-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      # ðŸŸ¦ Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # ðŸŸ¦ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: package-lock.json

      # ðŸŸ¦ Install dependencies
      - name: Install dependencies
        run: npm ci

      # ðŸŸ¦ Run unit tests with coverage & JUnit
      - name: Run unit tests with coverage and JUnit reports
        env:
          JEST_JUNIT_OUTPUT: coverage/junit.xml
        run: npm run test:ci

      # ðŸŸ¦ Publish test results
      - name: Publish test results to Checks
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Jest Test Results
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: true

      - name: Upload test results to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node
          path: coverage/
          retention-days: 30

      # ðŸŸ¦ SonarQube Scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sample-node-app
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js
            -Dsonar.tests=tests/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.coverage.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js

      # ðŸŸ¦ Azure Login (Ø¨Ø§Ø³ØªØ®Ø¯Ø§Ù… JSON ÙƒØ§Ù…Ù„)
      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ðŸŸ¦ Build + Push Docker image to DockerHub + Deploy to ACA
      - name: Build, push image to Docker Hub and deploy to ACA
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}
          dockerfilePath: ./Dockerfile

          # DockerHub auth
          registryUrl: docker.io
          registryUsername: ${{ secrets.DOCKERHUB_USERNAME }}
          registryPassword: ${{ secrets.DOCKERHUB_TOKEN }}

          # Azure targets
          resourceGroup: rg-Abdullah-Alotaibi
          containerAppName: frontendapp-aca

          # Image tag = commit SHA for traceability
          imageToBuild: ${{ secrets.DOCKERHUB_USERNAME }}/frontendapp-node:${{ github.sha }}
