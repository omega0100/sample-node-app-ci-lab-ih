name: CI/CD Pipeline with SonarQube, Docker, and Azure Web App

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write   # needed for OIDC later if required

env:
  APP_PORT: 3000
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/frontendapp-node
  AZURE_RESOURCE_GROUP: rg-Abdullah-Alotaibi
  AZURE_WEBAPP_NAME: frontendapp-web-abdullah

jobs:
  build-test-scan-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      # ðŸŸ¦ Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # ðŸŸ¦ Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      # ðŸŸ¦ Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # ðŸŸ¦ Step 4: Run tests
      - name: Run unit tests
        run: npm test --if-present

      # ðŸŸ¦ Step 5: SonarQube Scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=frontendapp-node
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**,tests/**
            -Dsonar.tests=tests/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.coverage.exclusions=node_modules/**,coverage/**,tests/**,**/*.test.js,**/*.spec.js

      # ðŸŸ¦ Step 6: Azure Login
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ðŸŸ¦ Step 7: Docker Hub login
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ðŸŸ¦ Step 8: Build & Push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest

      # ðŸŸ¦ Step 9: Configure Web App to use new image
      - name: Configure Web App container
        run: |
          az webapp config appsettings set \
            -g "${{ env.AZURE_RESOURCE_GROUP }}" \
            -n "${{ env.AZURE_WEBAPP_NAME }}" \
            --settings WEBSITES_PORT=${{ env.APP_PORT }} \
                       DOCKER_REGISTRY_SERVER_URL=https://index.docker.io/v1/ \
                       DOCKER_REGISTRY_SERVER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
                       DOCKER_REGISTRY_SERVER_PASSWORD=${{ secrets.DOCKERHUB_TOKEN }}

          az webapp config container set \
            -g "${{ env.AZURE_RESOURCE_GROUP }}" \
            -n "${{ env.AZURE_WEBAPP_NAME }}" \
            --container-image-name "${{ env.IMAGE_NAME }}:${{ github.sha }}" \
            --container-registry-url "https://index.docker.io"

          # Restart the Web App to pull new image
          az webapp restart \
            -g "${{ env.AZURE_RESOURCE_GROUP }}" \
            -n "${{ env.AZURE_WEBAPP_NAME }}"
